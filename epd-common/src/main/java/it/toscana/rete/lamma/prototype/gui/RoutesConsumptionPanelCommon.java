package it.toscana.rete.lamma.prototype.gui;

import com.bbn.openmap.gui.OMComponentPanel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import dk.dma.epd.common.prototype.EPD;
import dk.dma.epd.common.prototype.gui.route.RoutePropertiesDialogCommon;
import dk.dma.epd.common.prototype.model.route.IRoutesUpdateListener;
import dk.dma.epd.common.prototype.model.route.Route;
import dk.dma.epd.common.prototype.model.route.RoutesUpdateEvent;
import dk.dma.epd.common.prototype.route.RouteManagerCommon;
import it.toscana.rete.lamma.prototype.gui.route.FuelConsumptionTableModel;
import it.toscana.rete.lamma.prototype.gui.route.RouteFuelConsumptionPropertiesDialogCommon;
import it.toscana.rete.lamma.prototype.gui.route.RoutesConsumtionTableModel;
import org.geotools.util.DateTimeParser;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.stream.Collectors;

public class RoutesConsumptionPanelCommon extends OMComponentPanel implements PropertyChangeListener, ItemListener, IRoutesUpdateListener, TableModelListener {
    private JPanel panel1;
    public JTable rcTable;
    private JScrollPane scrollPane;
    public RouteManagerCommon routeManager;
    private RoutesConsumtionTableModel routesTableModel;

    public RoutesConsumptionPanelCommon() {
        $$$setupUI$$$();
        add(this.panel1);
    }

    private void createUIComponents() {
        routesTableModel = new RoutesConsumtionTableModel();
        routesTableModel.addTableModelListener(this);
        rcTable = new JTable(routesTableModel);
        // Set the minimum column widthsString()
        for (int x = 0; x < routesTableModel.COL_MIN_WIDTHS.length; x++) {
            rcTable.getColumnModel().getColumn(x).setPreferredWidth(routesTableModel.COL_MIN_WIDTHS[x]);
        }
        rcTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    openFuelConsumtion();
                }
            }
        });
        scrollPane = new JScrollPane(rcTable);

    }

    public void openFuelConsumtion() {

    }

    ;

    double calcTotal(Route route) {
        return route.getWaypoints().stream().filter(wp -> wp != null).map(wp -> wp.getOutLeg())
                .filter(p -> p != null).map(ol -> ol.getFuelConsumption()).filter(fc -> fc != null)
                .mapToDouble(fc -> fc.getFuel()).reduce(0, Double::sum);
    }

    private List<Route> getRoutes() {
        return routeManager.getRoutes().stream()
                .filter(r -> r.getRouteFCSettings() != null)
                .collect(Collectors.toList());

    }

    public int getRouteIdexByName(String name) {
        List<Route> routes = routeManager.getRoutes();
        for (int i = 0; i < routes.size(); i++) {
            if (routes.get(i).getName() == name)
                return i;
        }

        return -1;
    }

    @Override
    public void routesChanged(RoutesUpdateEvent e) {
        ((RoutesConsumtionTableModel) rcTable.getModel()).addRoutes(getRoutes());
    }

    @Override
    public void itemStateChanged(ItemEvent e) {

    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {

    }

    @Override
    public void findAndInit(Object obj) {
        super.findAndInit(obj);
        if (obj instanceof RouteManagerCommon) {
            routeManager = (RouteManagerCommon) obj;
            routeManager.addListener(this);
            ((RoutesConsumtionTableModel) rcTable.getModel()).addRoutes(getRoutes());
        }
    }

    @Override
    public void findAndUndo(Object obj) {
        super.findAndUndo(obj);
        if (obj instanceof RouteManagerCommon) {
            routeManager = null;
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void tableChanged(TableModelEvent e) {
        if (e.getColumn() == 4) {
            // Visibility has changed
            routeManager.notifyListeners(RoutesUpdateEvent.ROUTE_VISIBILITY_CHANGED);
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        panel1.setAutoscrolls(false);
        panel1.setBackground(new Color(-4473925));
        panel1.setForeground(new Color(-14930501));
        panel1.setMinimumSize(new Dimension(320, 210));
        panel1.setPreferredSize(new Dimension(300, 200));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        scrollPane.setDoubleBuffered(true);
        scrollPane.setMinimumSize(new Dimension(280, 200));
        scrollPane.setPreferredSize(new Dimension(280, 200));
        scrollPane.setVerticalScrollBarPolicy(20);
        panel1.add(scrollPane, BorderLayout.CENTER);
        rcTable.setAutoCreateColumnsFromModel(true);
        rcTable.setAutoCreateRowSorter(true);
        rcTable.setAutoResizeMode(1);
        rcTable.setAutoscrolls(true);
        rcTable.setDoubleBuffered(false);
        rcTable.setFillsViewportHeight(true);
        rcTable.setOpaque(true);
        rcTable.setRequestFocusEnabled(false);
        scrollPane.setViewportView(rcTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }


}
